# ${license-info}
# ${developer-info}
# ${author-info}
# ${build-info}
#

package NCM::Component::moab;

use strict;
use NCM::Component;
use vars qw(@ISA $EC);
@ISA = qw(NCM::Component);
$EC=LC::Exception::Context->new->will_store_all;
use NCM::Check;

$EC->error_handler(\&my_handler);
sub my_handler {
    my($ec, $e) = @_;
    $e->has_been_reported(1);
}

use EDG::WP4::CCM::Element;

use File::Copy;
use File::Path;
use Encode qw(encode_utf8);

local(*DTA);

use constant MOABCFG => qw(
    sched
    rm
    am
    user
    group
    qos
    class
    id
    node
    account
);

use constant MAINOPTS => qw (
    admin1
    admin_host
    logdir 
    loglevel
    logfilemaxsize
    logfilerolldepth
    enablemultireqjobs
    enforceresourcelimits
    nodepollfrequency
    rmpollinterval  
    defertime
    defercount
    deferstartcount
    jobaggregationtime
    nodeallocationpolicy
    jobprioaccrualpolicy
    resourcelimitpolicy
    preemptpolicy
    maxjob
    nodeavailabilitypolicy
    resweight
    rescap
    procweight
    usedatabase
);

use constant PRIORITYOPTS => qw (
    fsdecay
    fsdepth
    fsgroupweight
    fsinterval
    fspolicy
    fsweight
    queuetimeweight
    xfactorweight
    jobpriof
    attrweight
    attrstateweight
    usageweight
    usageexecutiontimeweight
);


##########################################################################
sub Configure($$@) {
##########################################################################
    
    our ($self, $config) = @_;

    # Define paths for convenience. 
    my $base = "/software/components/moab";

    # Save the date.
    my $date = localtime();
    
    # Mode: moab or maui
    my $mmode = "moab";
    if ($config->elementExists("$base/mode")) {
        $mmode = $config->getValue("$base/mode");
    }
    
    # Default location of config files
    my ($mpath,$mfile,$mbin);
    if ( $mmode eq "moab" ) {
        $mpath = "/opt/moab";
        $mfile = "moab.cfg";
    } elsif ( $mmode eq "maui") {
        $mpath = "/var/spool/maui";
        $mfile = "maui.cfg";
    } else {
        $self->Fail("Invalid mode $mmode (only moab or maui).");
        return 1;
    }
    if ($config->elementExists("$base/configPath")) {
        $mpath = $config->getValue("$base/configPath");
    }
    if ($config->elementExists("$base/configFile")) {
        $mfile = $config->getValue("$base/configFile");
    }

    # Add /etc and ensure that the directory exists.
    my $fname = "$mpath/$mfile";
    mkpath($mpath, 0, 0755) unless (-e $mpath);
    if (! -d $mpath) {
        $self->Fail("Can't create directory: $mpath");
        return 1;
    }

    my $contents = '';
    my $re;

    $contents .= "#\n# File generated by ncm-moab on $date\n#\n";

    ## main options
    $re = $config->getElement($base."/main")->getTree;
    $contents .= "\n";
    foreach my $opt (MAINOPTS) {
        $contents .= uc($opt)."\t".$re->{$opt}."\n" if exists($re->{$opt});
    }
    foreach my $opt (keys(%$re)) {
        $self->warn("Unknown opt $opt in MAIN") if (! (grep {$_ eq $opt} MAINOPTS));
    }
    $contents .= "\n";
    
    ## jobpriority opts
    $contents .= "\n";
    $re = $config->getElement($base."/priority")->getTree;
    foreach my $opt (PRIORITYOPTS) {
        $contents .= uc($opt)."\t".$re->{$opt}."\n" if exists($re->{$opt});
    }
    foreach my $opt (keys(%$re)) {
        $self->warn("Unknown opt $opt in PRIORITY") if (! (grep {$_ eq $opt} PRIORITYOPTS));
    }
    $contents .= "\n";
        
        
    ## CFG items
    foreach my $cfg ( MOABCFG ) {
        if ($config->elementExists($base."/".$cfg)) {
            $contents .= "\n";
            $re = $config->getElement($base."/".$cfg)->getTree;
            foreach my $name (keys(%$re)) {
                foreach my $val (@{$re->{$name}}) {
                    $contents .= uc($cfg)."CFG[$name]\t$val\n";
                }
            }
            $contents .= "\n";
        }
    }

    ## INCLUDE items
    if ($config->elementExists($base."/include")) {
        $contents .= "\n";
        my $re = $config->getElement($base."/include")->getTree;
        foreach my $name (keys(%$re)) {
            if (exists($re->{contents})) {
                ## create the inlcude file with contents
                my $result = LC::Check::file( "$mpath/$name.dat",
                                      backup => ".old",
                                      contents => encode_utf8($re->{contents}),
                                      );
                if ($result) {
                    $self->log("INCLUDE file $mpath/$name.dat updated");
                } else {
                    $self->error("INCLUDE file $mpath/$name.dat not updated");
                };
            };
            $contents .= "#INCLUDE\t$mpath/$name\n";
        }
        $contents .= "\n";
    }
    

    my $result = LC::Check::file( $fname,
                                  backup => ".old",
                                  contents => encode_utf8($contents),
                                );
    if ($result) {
        $self->log("$fname updated");
    } else {
        $self->error("$fname update failed");
        return 1;
    }

    ## reload/restart
    restart_service($mmode,$mbin); 

## end. only sub below    

## replace system()
sub runrun {
    my $cmd = shift|| "";
    return if ($cmd eq "");
    
    ## new style
    my $output;
    if(LC::Process::execute([$cmd],
                            "stdout" => \$output,
                            "stderr" => "stdout"
    ) && ($? == 0)) {
        $self->debug(4,"runrun succesfully ran \"$cmd\"");
        return 0;
    } else {
        $self->error("runrun failed to run \"$cmd\": output $output");
        return 1;
    }
}
    
## restart the service
sub restart_service {
    my ($mmode) = @_;

    my $mservice="/etc/init.d/$mmode";
    if (! ( -f $mservice and -x $mservice )) { 
        $self->info("$mservice does not exist, assuming configuration of $mmode client");
        return;
    }

    if (runrun("$mservice status")) {
        ## not running
        if (runrun("$mservice start")) {
            $self->error("$mmode init.d start failed");
        }
    } else {
        my $moabreloadfailed = 1;
        if ($mmode eq "moab") {
            ## use mschedctl -R to reload config
            if (! runrun("$mservice reload")) {
                $moabreloadfailed = 0;
            }
        } 
    
        if (($mmode eq "maui") || ($moabreloadfailed)) {
            if (runrun("$mservice stop")) {
                $self->warn("$mmode init.d stop failed");
            }
            sleep 5;
            if (runrun("$mservice start")) {
                $self->error("$mmode init.d start failed");
            }
        }
    }
}

## real end
    return 1;
}


1;      # Required for PERL modules
